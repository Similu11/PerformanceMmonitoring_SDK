{"version":3,"file":"collectinfo.umd.js","sources":["../src/typings/types.ts","../src/data/constants.ts","../src/data/reportData.ts","../src/config/index.ts","../src/data/analyticsTracker.ts","../src/error/index.ts","../src/helpers/getNetworkInformation.ts","../src/helpers/isLowEnd.ts","../src/helpers/onVisibilityChange.ts","../src/helpers/utils.ts","../src/helpers/vitalsScore.ts","../src/data/reportPerf.ts","../src/helpers/getNavigatorInfo.ts","../src/data/log.ts","../src/data/metrics.ts","../src/performance/cumulativeLayoutShift.ts","../src/performance/observeInstances.ts","../src/performance/performanceObserver.ts","../src/performance/firstInput.ts","../src/performance/totalBlockingTime.ts","../src/performance/paint.ts","../src/performance/resourceTiming.ts","../src/performance/observe.ts","../src/data/storageEstimate.ts","../src/collectinfo.ts","../src/tools/isSupported.ts","../src/performance/getNavigationTiming.ts","../src/helpers/isSupported.ts"],"sourcesContent":["/**\r\n * @param isResourceTiming  - 是否开启资源数据\r\n * @param isElementTiming - 是否开启性能数据\r\n * @param analyticsTracker - 自定义分析工具\r\n * @param analyticsTracker - void方法参数IAnalyticsTrackerOptions\r\n * @param maxTime  - 最大请求时间\r\n * @interface 系统配置接口\r\n */\r\n\r\nexport type IYidengData = | number | IYidengNavigationTiming | IYidengNetworkInformation;\r\n\r\nexport type IVitalsScore = 'good' | 'needsImprovement' | 'poor' | null;\r\n\r\nexport type EffectiveConnectionType = | '2g' | '3g' | '4g' | '5g' | 'slow-2g' | 'lte';\r\n\r\n//性能指标具体请求类型\r\nexport type IPerformanceEntryInitiatorType =\r\n    | 'beacon'\r\n    | 'css'\r\n    | 'fetch'\r\n    | 'img'\r\n    | 'other'\r\n    | 'script'\r\n    | 'xmlhttprequest';\r\n\r\n//性能指标参数\r\nexport type IPerformanceObserverType =\r\n    | 'first-input'\r\n    | 'largest-contentful-paint'\r\n    | 'layout-shift'\r\n    | 'longtask'\r\n    | 'measure'\r\n    | 'navigation'\r\n    | 'paint'\r\n    | 'element'\r\n    | 'resource';\r\n\r\nexport interface IReportData {\r\n    sendToAnalytics(level: AskPriority, body: string | object, url: string): void;\r\n}\r\n\r\nexport interface IYidengOptions {\r\n    captureError?: boolean; //捕获错误\r\n    resourceTiming?: boolean; //资源定时\r\n    elementTiming?: boolean; //元素\r\n    //分析器\r\n    analyticsTracker?: (options: IAnalyticsTrackerOptions) => void;\r\n    //日志\r\n    maxMeasureTime?: number; //最大测量时间\r\n    logUrl?: string;\r\n    rrwebUrl?: string;\r\n    permaceUrl: string;\r\n    isRrweb?:boolean; //是否开启录制\r\n    module?:string;\r\n}\r\n\r\nexport interface IAnalyticsTrackerOptions {\r\n    module?:string;\r\n    metricName: string;  //指标名称\r\n    data: IYidengData;\r\n    eventProperties: object;\r\n    navigatorInformation: INavigatorInfo;\r\n    vitalsScore: IVitalsScore;\r\n}\r\n\r\n\r\nexport interface INavigatorInfo {\r\n    deviceMemory?: number;\r\n    hardwareConcurrency?: number;\r\n    isLowEndDevice?: boolean;\r\n    isLowEndExperience?: boolean;\r\n    serviceWorkerStatus?: 'controlled' | 'supported' | 'unsupported';\r\n}\r\n\r\nexport interface IYidengNetworkInformation {\r\n    downlink?: number;\r\n    effectiveType?: EffectiveConnectionType;\r\n    onchange?: () => void;\r\n    rtt?: number;\r\n    saveData?: boolean;\r\n}\r\n\r\nexport interface IYidengNavigationTiming {\r\n    fetchTime?: number;\r\n    workerTime?: number;\r\n    totalTime?: number;\r\n    downloadTime?: number;\r\n    timeToFirstByte?: number;\r\n    headerSize?: number;\r\n    dnsLookupTime?: number;\r\n    tcpTime?: number;\r\n    whiteTime?: number;\r\n    domTime?: number;\r\n    loadTime?: number;\r\n    parseDomTime?: number;\r\n}\r\n\r\nexport interface IYidengConfig {\r\n    reportData: IReportData;\r\n    isResourceTiming: boolean;\r\n    isElementTiming: boolean;\r\n    analyticsTracker?: (options: IAnalyticsTrackerOptions) => void;\r\n    logUrl: string;\r\n    maxTime: number;\r\n    isRrweb:boolean;\r\n    rrwebUrl:string;\r\n    permaceUrl:string;\r\n    module:string;\r\n}\r\n\r\n//消耗时间类型\r\nexport interface IYidengDataConsumption {\r\n    beacon: number;\r\n    css: number;\r\n    fetch: number;\r\n    img: number;\r\n    other: number;\r\n    script: number;\r\n    total: number;\r\n    xmlhttprequest: number;\r\n}\r\n\r\n//度量指标数据\r\nexport interface IMetricMap {\r\n    [measureName: string]: boolean;\r\n}\r\n\r\nexport declare interface IPerformanceEntry {\r\n    decodedBodySize?: number;\r\n    duration: number;\r\n    entryType: IPerformanceObserverType;\r\n    initiatorType?: IPerformanceEntryInitiatorType;\r\n    loadTime: number;\r\n    name: string;\r\n    renderTime: number;\r\n    startTime: number;\r\n    hadRecentInput?: boolean;\r\n    value?: number;\r\n    identifier?: string;\r\n}\r\n\r\nexport interface IPerfObservers {\r\n    [measureName: string]: any;\r\n}\r\n\r\n// https://wicg.github.io/event-timing/#sec-performance-event-timing\r\nexport interface PerformanceEventTiming extends PerformanceEntry {\r\n    processingStart: DOMHighResTimeStamp;\r\n    target?: Node;\r\n}\r\n//请求响应优先级\r\nexport enum AskPriority {\r\n    URGENT = 1, //紧急的\r\n    IDLE = 2,  //闲置的\r\n}","interface Navigator{\r\n    estimated:any;\r\n    storage: any;\r\n    deviceMemory?: number;\r\n    hardwareConcurrency?: number;\r\n    connection?: string;\r\n    effectiveType?: string;\r\n    serviceWorker?: {\r\n        controller?: string;\r\n    };\r\n    sendBeacon?: any;\r\n}\r\nexport const W = window;\r\nexport const C = W.console;\r\nexport const D = document;\r\nexport const WN = (W.navigator as unknown) as Navigator; //获取用户浏览器信息\r\nexport const WP = W.performance; //Performance API允许网页访问某些函数来测量网页和Web应用程序的性能\r\n//内存\r\nexport const getDM = () => WN.deviceMemory ?? 0;\r\n//cpu核数\r\nexport const getHC = () => WN.hardwareConcurrency ?? 0;\r\n","import { AskPriority, IReportData } from \"../typings/types\";\r\nimport { W, WN } from './constants';\r\nimport { config } from '../config';\r\n//上报工具\r\ntype TrackerOptions = {\r\n    logUrl: string;\r\n}\r\n\r\nclass ReportData implements IReportData {\r\n    private logUrl: string;\r\n    constructor(options: TrackerOptions) {\r\n        const { logUrl } = options;\r\n        if (logUrl) {\r\n            this.logUrl = logUrl;\r\n        } else {\r\n            throw new Error('请传递要记录数据的路由接口');\r\n        }\r\n    }\r\n\r\n    public sendToAnalytics(level: AskPriority, body: string | object, url: string) {\r\n        if (url) {\r\n            this.logUrl = url; //临时更换其他URL\r\n        }\r\n        let logurl = this.logUrl;\r\n        if (level == AskPriority.URGENT) {\r\n            //紧急日志\r\n            if (!!W.fetch) {\r\n                fetch(logurl, {\r\n                    headers: {\r\n                        'module': config.module.toString()\r\n                    }, body: body.toString(), method: 'POST', keepalive: true\r\n                }); // fetch方法优先级最高\r\n            } else {\r\n                let xhr: XMLHttpRequest | null = new XMLHttpRequest();\r\n                // 设置请求头\r\n                xhr.setRequestHeader('Content-Type', 'application/json');\r\n                xhr.setRequestHeader('module', config.module.toString());\r\n                xhr.send(body.toString()); // 发送参数\r\n                xhr.onload = function (e) {\r\n                    //及时清理以防多次创建\r\n                    xhr = null;\r\n                }\r\n            }\r\n        } else if (level == AskPriority.IDLE) {\r\n            if (!!WN.sendBeacon) {\r\n                navigator.sendBeacon(logurl, body.toString()); //sendBeacon()方法会使用户代理在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能\r\n            } else {\r\n                let img: HTMLImageElement | null = new Image();\r\n                img.src = `${logurl}?body=${body}`;\r\n                img.onload = function () {\r\n                    img = null; //统计完成收回创建的元素防止内存泄露\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default ReportData;","import ReportData from \"../data/reportData\";\r\nimport { IYidengConfig, IReportData } from \"../typings/types\";\r\n\r\nexport const config: IYidengConfig = {\r\n    logUrl:\"\",\r\n    reportData: new ReportData({ logUrl: 'hole' }),\r\n    isResourceTiming: false,\r\n    isElementTiming: false,\r\n    maxTime: 15000,\r\n    isRrweb:true,\r\n    rrwebUrl:\"\",\r\n    permaceUrl:\"\",\r\n    module:''\r\n}","//分析器\r\nimport { IAnalyticsTrackerOptions, AskPriority } from \"../typings/types\";\r\nimport { config } from \"../config\";\r\nconst analyticsTracker = (options: IAnalyticsTrackerOptions): void => {\r\n    const {\r\n        metricName,\r\n        eventProperties,\r\n        data,\r\n        navigatorInformation,\r\n        vitalsScore\r\n    } = options;\r\n    options.module = config.module;\r\n    config.reportData.sendToAnalytics(AskPriority.IDLE, options, config.permaceUrl);//上传性能指标\r\n};\r\nexport default analyticsTracker;","import { config } from '../config';\r\nimport { W } from '../data/constants';\r\n//rrweb在这里引入\r\nimport { record, pack } from 'rrweb';\r\nimport { AskPriority } from '../typings/types';\r\ntype ErrorInfo = {};\r\n\r\nclass ErrorTrace {\r\n    private errordefo: ErrorInfo;\r\n    private eventsMatrix: Array<[]>;\r\n    constructor() {\r\n        this.errordefo = {};\r\n        this.eventsMatrix = [[]];\r\n    }\r\n    //全局捕获同步+异步错误\r\n    private globalError() {\r\n        W.onerror = (\r\n            eventOrMessage: Event | string,\r\n            scriptURL?: string,\r\n            lineno?: number,\r\n            colno?: number,\r\n            error?: Error\r\n        ): boolean => {\r\n            const errorInfo = JSON.stringify({\r\n                scriptURL,\r\n                lineno,\r\n                colno,\r\n                error,\r\n                module: config.module\r\n            });\r\n            //通过错误信息还原sourcemap源文件地址\r\n            config.reportData.sendToAnalytics(AskPriority.URGENT, errorInfo, config.logUrl);\r\n            const len = this.eventsMatrix.length;\r\n            let events = [];\r\n            if (len > 1) {\r\n                events = this.eventsMatrix[len - 2].concat(this.eventsMatrix[len - 1]);\r\n            } else {\r\n                events = this.eventsMatrix[0];\r\n            }\r\n            const body = JSON.stringify({ events, module: config.module });\r\n            config.reportData.sendToAnalytics(AskPriority.IDLE, body, config.rrwebUrl);\r\n            this.eventsMatrix = [[]];\r\n            this.recordPage();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //资源挂载失败 如404png\r\n    private networkError() {\r\n        W.addEventListener('error', function (e: ErrorEvent) {\r\n            if (e.target !== W) {\r\n                console.log('网络错误', e.target);\r\n                //这里看是否需要上报，资源404是否需要上报\r\n            }\r\n        }, true);\r\n    }\r\n\r\n    //异步Promise错误\r\n    private promiseError() {\r\n        W.addEventListener('unhandledrejection', function (e) {\r\n            e.preventDefault();\r\n            console.log('promiseError', e.reason);\r\n            return true;\r\n        })\r\n    }\r\n\r\n    //iframe加载错误\r\n    private iframeError() {\r\n        const frames = W.frames;\r\n        for (let i = 0; i < frames.length; i++) {\r\n            frames[i].addEventListener('error', (e) => {\r\n                console.log('iframe加载错误', e);\r\n            }, true);\r\n            frames[i].addEventListener('unhandledrejection', function (e) {\r\n                console.log('iframe错误_unhandledrejection', e);\r\n            }, true)\r\n        }\r\n    }\r\n\r\n    private consoleReflect() {\r\n        const console_error = W.console.error;\r\n        W.console.error = function () {\r\n            // config.reportData.sendToAnalytics(AskPriority.IDLE, 'console_error','');\r\n            // console_error.apply(window, arguments);\r\n        };\r\n    }\r\n\r\n    private recordPage() {\r\n        if (config.isRrweb) {\r\n            let eventsMatrix = this.eventsMatrix;\r\n            record({\r\n                emit(event: never, isCheckout) {\r\n                    // isCheckout 是一个标识，告诉你重新制作了快照\r\n                    if (isCheckout) {\r\n                        eventsMatrix.push([]);\r\n                    }\r\n                    const lastEvents = eventsMatrix[eventsMatrix.length - 1];\r\n                    lastEvents.push(event);\r\n                },\r\n                checkoutEveryNth: 10, // 每 10 个 event 重新制作快照\r\n                packFn: pack,\r\n            });\r\n        }\r\n    }\r\n    public run() {\r\n        this.networkError();\r\n        //触发全体数据监听错误\r\n        this.globalError();\r\n        //触发promise的错误\r\n        this.promiseError();\r\n        this.recordPage();\r\n    }\r\n}\r\n\r\nexport default ErrorTrace;","import { WN } from '../data/constants';\r\nimport {\r\n    EffectiveConnectionType,\r\n    IYidengNetworkInformation,\r\n} from '../typings/types';\r\n\r\nexport let et: EffectiveConnectionType = '4g';\r\nexport let sd = false;\r\n\r\nexport const getNetworkInformation = (): IYidengNetworkInformation => {\r\n    //获取用户网速\r\n    if ('connection' in WN) {\r\n        const dataConnection = (WN as any).connection;\r\n        if (typeof dataConnection !== 'object') {\r\n            return {};\r\n        }\r\n        et = dataConnection.effectiveType;\r\n        sd = !!dataConnection.saveData;\r\n        return {\r\n            downlink: dataConnection.downlink,\r\n            effectiveType: dataConnection.effectiveType,\r\n            rtt: dataConnection.rtt,\r\n            saveData: !!dataConnection.saveData,\r\n        };\r\n    }else{\r\n        // 这里我们使用多普勒测速法或者直接用图片探测法\r\n    }\r\n    return {};\r\n}","import { getDM, getHC } from '../data/constants';\r\nimport { EffectiveConnectionType } from '../typings/types';\r\n\r\nexport const getIsLowEndDevice = (): boolean => {\r\n    //如果可运行线程的逻辑处理器数<=4\r\n    if (getHC() && getHC() <= 4) {\r\n        return true;\r\n    }\r\n\r\n    //如果RAM客户端设备的近似数量小于等于4\r\n    if (getDM() && getDM() <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const getIsLowEndExperience = (\r\n    et: EffectiveConnectionType,\r\n    sd: boolean,\r\n): boolean => {\r\n    //如果连接的有效类型为 'slow-2g', '2g', '3g', or '4g' is !== 4g\r\n    switch (et) {\r\n        case 'slow-2g':\r\n            return true;\r\n            break;\r\n        case '2g':\r\n            return true;\r\n            break;\r\n        case '3g':\r\n            return true;\r\n            break;\r\n        default:\r\n            // 数据保存程序首选项\r\n            return getIsLowEndDevice() || sd;\r\n    }\r\n}\r\n","import { D } from '../data/constants';\r\n\r\nexport const visibility = {\r\n    isHidden: false,\r\n};\r\n/**\r\n * \r\n * 从visibilitychange listener，它仅在页面隐藏时保存，因为在发送计时或记录时，不要使用错误的“隐藏”值很重要。\r\n */\r\nexport const didVisibilityChange = function (cb: Function) {\r\n    if (D.hidden) {\r\n        cb();\r\n        visibility.isHidden = D.hidden;\r\n    }\r\n};","import { W } from '../data/constants';\r\n\r\nexport const roundByTwo = (num: number) => {\r\n    return parseFloat(num.toFixed(2));\r\n};\r\n\r\nexport const convertToKB = (bytes: number): number | null => {\r\n    if (typeof bytes !== 'number') {\r\n        return null;\r\n    }\r\n    return roundByTwo(bytes / Math.pow(1024, 2));\r\n};\r\n\r\n/**\r\n * 推送任务至 requestIdleCallback\r\n * window.requestIdleCallback()方法插入一个函数，这个函数将在浏览器空闲时期被调用。\r\n * 这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。\r\n * 函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。\r\n * 强烈建议使用timeout选项进行必要的工作，否则可能会在触发回调之前经过几秒钟 \r\n*/\r\n\r\nexport const pushTask = (cb: any): void => {\r\n    if ('requestIdleCallback' in W) {\r\n        (W as any).requestIdleCallback(cb, { timeout: 3000 });\r\n    } else {\r\n        cb();\r\n    }\r\n};","import { IYidengData, IVitalsScore } from '../typings/types';\r\n/**https://web.dev/vitals/\r\n * Web 指标是 Google 开创的一项新计划\r\n * TTFB 是衡量资源请求与响应的第一个字节开始到达之间的时间的度量\r\n * FP 首次绘制\r\n * FMP 首次有效绘制\r\n * TTI 交互时间 (性能分析点)\r\n * FCP(首次内容绘制) 指标测量页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。\r\n * LCP(最大内容绘制) 指标会根据页面首次开始加载的时间点来报告可视区域内可见的最大图像或文本块完成渲染的相对时间\r\n * FID 测量从用户第一次与页面交互（例如当他们单击链接、点按按钮或使用由 JavaScript 驱动的自定义控件）直到浏览器对交互作出响应，并实际能够开始处理事件处理程序所经过的时间\r\n * TTI 指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间\r\n * TBT (总阻塞时间) 指标测量First Contentful Paint 首次内容绘制 (FCP)与Time to Interactive 可交互时间 (TTI)之间的总时间，这期间，主线程被阻塞的时间过长，无法作出输入响应\r\n * CLS (累积布局偏移)测量视觉稳定性的一个以用户为中心的重要指标，因为该项指标有助于量化用户经历意外布局偏移的频率，较低的 CLS 有助于确保一个页面是令人愉悦的\r\n * \r\n */\r\nconst fcpScore = [1000, 2500];\r\nconst lcpScore = [2500, 4000];\r\nconst fidcore = [100, 300];\r\nconst clsScore = [0.1, 0.25];\r\nconst tbtScore = [300, 600];\r\n\r\nexport const webVitalsScore: Record<string, number[]> = {\r\n    fp: fcpScore,\r\n    fcp: fcpScore,\r\n    lcp: lcpScore,\r\n    lcpFinal: lcpScore,\r\n    fid: fidcore,\r\n    fidVitals: fidcore,\r\n    cls: clsScore,\r\n    clsFinal: clsScore,\r\n    tbt: tbtScore,\r\n    tbt5S: tbtScore,\r\n    tbt10S: tbtScore,\r\n    tbtFinal: tbtScore,\r\n};\r\n\r\nexport const getVitalsScore = (\r\n    measureName: string,\r\n    value: IYidengData\r\n  ): IVitalsScore => {\r\n    if (!webVitalsScore[measureName]) {\r\n      return null;\r\n    }\r\n    if (value <= webVitalsScore[measureName][0]) {\r\n      return 'good';\r\n    }\r\n    return value <= webVitalsScore[measureName][1] ? 'needsImprovement' : 'poor';  // needsImprovement 需要改进   poor 贫穷的\r\n  };","import { config } from '../config';\r\nimport { getNavigatorInfo } from '../helpers/getNavigatorInfo';\r\nimport { visibility } from '../helpers/onVisibilityChange';\r\nimport { pushTask } from '../helpers/utils';\r\nimport { getVitalsScore } from '../helpers/vitalsScore';\r\n\r\n/**\r\n * Sends the User timing measure to analyticsTracker\r\n * 将用户定时测量发送到\r\n */\r\n\r\nexport const reportPerf = function (\r\n    measureName: string,//被测量的名称\r\n    data: any,\r\n    customProperties?: object //定制属性\r\n): void {\r\n    pushTask(() => {\r\n        // 当页面被隐藏的时候不报告具体数据，这里是为了处理用户切走界面时的问题\r\n        if ((visibility.isHidden && measureName.indexOf('Final') < 0) || !config.analyticsTracker) {\r\n            return;\r\n        }\r\n        //将度量发送到自定义分析服务\r\n        config.analyticsTracker({\r\n            metricName: measureName, //指标名称\r\n            data,\r\n            eventProperties: customProperties || {}, //事件属性\r\n            navigatorInformation: getNavigatorInfo(), //导航信息\r\n            vitalsScore: getVitalsScore(measureName, data), //指标分数\r\n        });\r\n    })\r\n}","import { getDM, getHC, WN } from '../data/constants';\r\nimport { et, sd } from './getNetworkInformation';\r\nimport { getIsLowEndDevice, getIsLowEndExperience } from './isLowEnd';\r\nimport { INavigatorInfo } from '../typings/types';\r\n/**\r\n * 如下信息来源于 window.navigator:\r\n * 1. Device Memory  只读属性返回千兆字节为单位的大概的机器内存\r\n * 2. Hardware Concurency  返回可在用户计算机上运行线程的逻辑处理器数\r\n * \r\n * Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。\r\n * 这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用来采取适当的动作、更新来自服务器的的资源。\r\n * 它还提供入口以推送通知和访问后台同步 API。\r\n * \r\n * 3. Status of the service worker:\r\n *     - controlled: a service worker is controlling the page     --service worker正在控制页面\r\n *     - supported: the browser supports service worker     浏览器支持service worker\r\n *     - unsupported: the user's browser does not support service worker   用户的浏览器不支持service worker\r\n */\r\nexport const getNavigatorInfo = function (): INavigatorInfo {\r\n    if (WN) {\r\n        return {\r\n            deviceMemory: getDM() || 0,\r\n            hardwareConcurrency: getHC() || 0,\r\n            serviceWorkerStatus:\r\n                'serviceWorker' in WN\r\n                    ? WN.serviceWorker!.controller\r\n                        ? 'controlled'\r\n                        : 'supported'\r\n                    : 'unsupported',\r\n            isLowEndDevice:getIsLowEndDevice(),\r\n            isLowEndExperience: getIsLowEndExperience(et, sd),\r\n        }\r\n    }\r\n    return {}\r\n}\r\n","import { config } from \"../config\";\r\nimport { reportPerf } from '../data/reportPerf';\r\nimport { roundByTwo } from '../helpers/utils';\r\n\r\nexport const logData = (\r\n    measureName: string,\r\n    metric: any,\r\n    customProperties?: object\r\n): void => {\r\n    Object.keys(metric).forEach((key) => {\r\n        if (typeof metric[key] === 'number') {\r\n            metric[key] = roundByTwo(metric[key]);\r\n        }\r\n    });\r\n    //将度量发送到外部跟踪服务\r\n    reportPerf(measureName, metric, customProperties);\r\n}\r\n\r\n/**\r\n * \r\n * 将度量持续时间分派到内部日志和外部时间跟踪服务中\r\n */\r\n\r\nexport const logMetric = (\r\n    duration: number, //持续时间\r\n    measureName: string, //测试名称\r\n    customProperties?: object //定制属性\r\n): void => {\r\n    const duration2Decimal = roundByTwo(duration); //持续2分钟\r\n    if (duration2Decimal <= config.maxTime && duration2Decimal >= 0) {\r\n        // 从内部或者外部的报告工具报告指标数据\r\n        reportPerf(measureName, duration2Decimal, customProperties);\r\n    }\r\n}\r\n","import { IMetricMap, IYidengDataConsumption } from '../typings/types';\r\n\r\nexport const metrics: IMetricMap = {};\r\nexport const cls = {\r\n    value: 0,\r\n};\r\nexport const fcp = {\r\n    value: 0,\r\n};\r\nexport const lcp = {\r\n    value: 0,\r\n};\r\nexport const fcpEntryName = 'first-contentful-paint'; //首次绘制\r\nexport const rt: { value: IYidengDataConsumption } = {\r\n    value: {\r\n        beacon: 0,\r\n        css: 0,\r\n        fetch: 0,\r\n        img: 0,\r\n        other: 0,\r\n        script: 0,\r\n        total: 0,\r\n        xmlhttprequest: 0,\r\n    },\r\n};\r\n//主线程总阻塞时间\r\nexport const tbt = {\r\n    value: 0,\r\n};","import { cls } from '../data/metrics';\r\nimport { IPerformanceEntry } from '../typings/types';\r\n/**\r\n * 检测新的布局移位事件并更新 `cumulativeLayoutShiftScore`变量。\r\n */\r\n\r\nexport const initLayoutShift = (performanceEntries: IPerformanceEntry[]) => {\r\n    const lastEntry = performanceEntries.pop();\r\n    // 仅统计没有最近用户输入的布局移位\r\n    if (lastEntry && !lastEntry.hadRecentInput && lastEntry.value) {\r\n        cls.value += lastEntry.value;\r\n    }\r\n};","import { IPerfObservers } from '../typings/types';\r\n/**\r\n * @remarks 核心性能数据指标对象\r\n * @public\r\n */\r\nexport const perfObservers: IPerfObservers = {};","import { C } from '../data/constants';\r\nimport { perfObservers } from './observeInstances';\r\nimport { IPerformanceObserverType } from '../typings/types';\r\n/**\r\n * PerformanceObserver 异步订阅封装\r\n */\r\n\r\nexport const po = (\r\n    eventType: IPerformanceObserverType,\r\n    cb: (performanceEntries: any[]) => void\r\n): PerformanceObserver | null => {\r\n    try {\r\n        const perfObserver = new PerformanceObserver((entryList) => {\r\n            cb(entryList.getEntries());\r\n        });\r\n        // 订阅时间或者开始计时 buffered不立即执行在内存中留下PerformanceObserver实例\r\n        perfObserver.observe({ type: eventType, buffered: true });\r\n        return perfObserver;\r\n    } catch (e) {\r\n        C.warn('Yideng.js:', e);\r\n    }\r\n    return null;\r\n}\r\n\r\n//断开测试通道\r\nexport const poDisconnect = (observer: any) => {\r\n    if (perfObservers[observer]) {\r\n        perfObservers[observer].disconnect();\r\n    }\r\n    delete perfObservers[observer];\r\n};","import { logData, logMetric } from '../data/log';\r\nimport { cls, lcp, rt, tbt } from '../data/metrics';\r\nimport { perfObservers } from './observeInstances';\r\nimport { poDisconnect } from './performanceObserver';\r\nimport { PerformanceEventTiming } from '../typings/types';\r\nexport const initFirstInputDelay = (\r\n    performanceEntries: PerformanceEventTiming[]\r\n) => {\r\n    //取最后的一位即为我们希望所获取的时间点\r\n    const lastEntry = performanceEntries.pop();\r\n    if (lastEntry) {\r\n        //核心Web Vitals FID逻辑\r\n        // 测量输入事件的延迟操作\r\n        logMetric(lastEntry.processingStart - lastEntry.startTime, 'fidVitals', {\r\n            performanceEntry: lastEntry,\r\n        });\r\n        // 传统的FID逻辑\r\n        // 测量处理第一个输入事件的持续时间\r\n        logMetric(lastEntry.duration, 'fid', {\r\n            performanceEntry: lastEntry,\r\n        });\r\n    }\r\n\r\n    // 销毁对FID的注册回调 避免过多的观察者造成内存泄露\r\n    poDisconnect(1);\r\n    //初始化lcp\r\n    logMetric(lcp.value, 'lcp');\r\n\r\n    if (perfObservers[3] && typeof perfObservers[3].takeRecords === 'function') {\r\n        perfObservers[3].takeRecords();\r\n    }\r\n    logMetric(cls.value, 'cls');\r\n    logMetric(tbt.value, 'tbt');\r\n\r\n    //FID后有5秒延迟的TBT\r\n    setTimeout(() => {\r\n        logMetric(tbt.value, `tbt5S`);\r\n    }, 5000);\r\n\r\n    //FID后10秒延迟的TBT\r\n    setTimeout(() => {\r\n        logMetric(tbt.value, `tbt10S`);\r\n        //FID被激活以后10S的整体数据消耗\r\n        logData('dataConsumption', rt.value);\r\n    }, 10000);\r\n}","import { fcp, tbt } from '../data/metrics';\r\nimport { IPerformanceEntry } from '../typings/types';\r\nexport const initTotalBlockingTime = (\r\n    performanceEntries: IPerformanceEntry[]\r\n): void => {\r\n    performanceEntries.forEach((entry) => {\r\n        //从fcp -> tti获取长耗时任务（self表示耗时长任务来自于渲染帧）\r\n        // console.log('🍌', entry);\r\n        if (entry.name !== 'self' || entry.startTime < fcp.value) {\r\n            return;\r\n        }\r\n        // console.log('🍌2', entry);\r\n        //https://developer.mozilla.org/zh-CN/docs/Web/API/Long_Tasks_API\r\n        //长耗时任务意味着执行时间超过50ms的\r\n        const blockingTime = entry.duration - 50;\r\n        if (blockingTime > 0) {\r\n            tbt.value += blockingTime;\r\n        }\r\n    });\r\n}","import { IPerformanceEntry } from '../typings/types';\r\nimport { fcp, fcpEntryName, lcp } from '../data/metrics';\r\nimport { po, poDisconnect } from './performanceObserver';\r\nimport { perfObservers } from './observeInstances';\r\nimport { initTotalBlockingTime } from './totalBlockingTime';\r\nimport { logMetric } from '../data/log';\r\nexport const initFirstPaint = (performanceEntries: IPerformanceEntry[]) => {\r\n    performanceEntries.forEach((entry) => {\r\n        if (entry.name === 'first-paint') {\r\n            logMetric(entry.startTime, 'fp');\r\n        } else if (entry.name === fcpEntryName) {\r\n            fcp.value = entry.startTime;\r\n            logMetric(fcp.value, 'fcp');\r\n            perfObservers[4] = po('longtask', initTotalBlockingTime);\r\n            poDisconnect(0);\r\n        }\r\n    });\r\n};\r\n\r\nexport const initLargestContentfulPaint = (\r\n    performanceEntries: IPerformanceEntry[]\r\n) => {\r\n    const lastEntry = performanceEntries.pop();\r\n    if (lastEntry) {\r\n        lcp.value = lastEntry.renderTime || lastEntry.loadTime;\r\n    }\r\n};\r\n\r\nexport const initElementTiming = (performanceEntries: IPerformanceEntry[]) => {\r\n    performanceEntries.forEach((entry) => {\r\n        if (entry.identifier) {\r\n            logMetric(entry.startTime, entry.identifier);\r\n        }\r\n    });\r\n};\r\n","import { config } from '../config';\r\nimport { logData } from '../data/log';\r\nimport { rt } from '../data/metrics';\r\nimport { IPerformanceEntry } from '../typings/types';\r\nexport const initResourceTiming = (performanceEntries: IPerformanceEntry[]) => {\r\n    //console.log('🐶', performanceEntries);\r\n    performanceEntries.forEach((entry) => {\r\n        //console.log('🐶', 1);\r\n        if (config.isResourceTiming) {\r\n            logData('resourceTiming', entry);\r\n        }\r\n        if (entry.decodedBodySize && entry.initiatorType) {\r\n            const bodySize = entry.decodedBodySize / 1000;\r\n            rt.value[entry.initiatorType] += bodySize;\r\n            rt.value.total += bodySize;\r\n        }\r\n    });\r\n};","import { config } from \"../config\";\r\nimport { logMetric } from '../data/log';\r\nimport { cls, lcp, tbt } from '../data/metrics';\r\nimport { initLayoutShift } from './cumulativeLayoutShift';\r\nimport { initFirstInputDelay } from './firstInput';\r\nimport { perfObservers } from './observeInstances';\r\nimport {\r\n    initElementTiming,\r\n    initFirstPaint,\r\n    initLargestContentfulPaint,\r\n} from './paint';\r\nimport { po, poDisconnect } from './performanceObserver';\r\nimport { initResourceTiming } from './resourceTiming';\r\nexport const initPerformanceObserver = (): void => {\r\n    console.log('⏰ 性能收集开始', Math.random());\r\n    perfObservers[0] = po('paint', initFirstPaint);\r\n    perfObservers[1] = po('first-input', initFirstInputDelay);\r\n    perfObservers[2] = po('largest-contentful-paint', initLargestContentfulPaint);\r\n    //收集页面全部资源性能数据\r\n    if (config.isResourceTiming) {\r\n        console.log('📚 收集页面性能数据');\r\n        po('resource', initResourceTiming);\r\n    }\r\n    perfObservers[3] = po('layout-shift', initLayoutShift);\r\n    if (config.isElementTiming) {\r\n        po('element', initElementTiming);\r\n    }\r\n};\r\n\r\nexport const disconnectPerfObserversHidden = (): void => {\r\n    if (perfObservers[2]) {\r\n        logMetric(lcp.value, `lcpFinal`);\r\n        poDisconnect(2);\r\n    }\r\n    if (perfObservers[3]) {\r\n        if (typeof perfObservers[3].takeRecords === 'function') {\r\n            perfObservers[3].takeRecords();\r\n        }\r\n        logMetric(cls.value, `clsFinal`);\r\n        poDisconnect(3);\r\n    }\r\n    if (perfObservers[4]) {\r\n        logMetric(tbt.value, `tbtFinal`);\r\n        poDisconnect(4);\r\n    }\r\n};","import { logData } from './log';\r\nimport { convertToKB } from '../helpers/utils';\r\n/**\r\n * StorageManager接口的estimate（）方法询问Storage Manager应用程序占用的存储空间（使用量）和可用空间（配额）。\r\n */\r\n\r\nexport const reportStorageEstimate = (storageInfo: StorageEstimate) => {\r\n    const estimateUsageDetails =\r\n        'usageDetails' in storageInfo ? (storageInfo as any).usageDetails : {};\r\n    logData('storageEstimate', {\r\n        quota: convertToKB((storageInfo as any).quota),\r\n        usage: convertToKB((storageInfo as any).usage),\r\n        caches: convertToKB(estimateUsageDetails.caches),\r\n        indexedDB: convertToKB(estimateUsageDetails.indexedDB),\r\n        serviceWorker: convertToKB(estimateUsageDetails.serviceWorkerRegistrations),\r\n    });\r\n};","/**\r\n * 一款免费的开源性能监控SDK\r\n * 目前能够完成监控的指标包含FCP等\r\n * \r\n */\r\nimport { config } from './config';\r\nimport { IReportData, IYidengOptions } from './typings/types';\r\nimport ReportData from './data/reportData';\r\nimport analyticsTracker from './data/analyticsTracker';\r\nimport ErrorTrace from './error';\r\nimport { isPerformanceSupported } from './tools/isSupported';\r\nimport { getNavigationTiming } from './performance/getNavigationTiming';\r\nimport { D, W, WN, WP } from './data/constants';\r\nimport {\r\n    disconnectPerfObserversHidden,\r\n    initPerformanceObserver,\r\n} from './performance/observe';\r\nimport { didVisibilityChange } from './helpers/onVisibilityChange';\r\nimport { logData } from './data/log';\r\nimport { getNetworkInformation } from './helpers/getNetworkInformation';\r\nimport { reportStorageEstimate } from './data/storageEstimate';\r\nexport default class collectInfo {\r\n    private v = '1.0.0';\r\n    private reportData: IReportData;\r\n    constructor(options: IYidengOptions = { permaceUrl: '', rrwebUrl: '', module: \"\" }) {\r\n        // 扩展基础配置\r\n        const logUrl = options.logUrl; //数据上报服务地址\r\n        const rrwebUrl = options.rrwebUrl;\r\n        const permaceUrl = options.rrwebUrl;\r\n        if (!logUrl) {\r\n            throw new Error(`小石头系统监控平台${this.v}提示未传递上报服务地址`);\r\n        }\r\n        //向后台输送数据\r\n        const insReportData = new ReportData({\r\n            logUrl,\r\n        });\r\n        config.reportData = insReportData;\r\n        //对外暴露上传接口\r\n        this.reportData = insReportData;\r\n        //集合数据汇总\r\n        const _analyticsTracker = options.analyticsTracker;\r\n        if (_analyticsTracker) {\r\n            config.analyticsTracker = _analyticsTracker; //若用户传入分析器，则使用用户的分析器\r\n        } else {\r\n            config.analyticsTracker = analyticsTracker;\r\n        }\r\n        config.isResourceTiming = !!options.resourceTiming;\r\n        config.isElementTiming = !!options.elementTiming;\r\n        config.maxTime = options.maxMeasureTime || config.maxTime;\r\n        config.isRrweb = options.isRrweb || config.isRrweb;\r\n        config.rrwebUrl = options.rrwebUrl || config.rrwebUrl;\r\n        config.permaceUrl = options.permaceUrl || config.permaceUrl;\r\n        config.logUrl = options.logUrl || config.logUrl;\r\n        config.module = options.module || config.module;\r\n        if (options.captureError) {\r\n            //开启错误跟踪\r\n            const errorTrace = new ErrorTrace();\r\n            errorTrace.run();\r\n        }\r\n\r\n        //如果浏览器不支持性能指标只能放弃\r\n        if (!isPerformanceSupported()) {\r\n            return;\r\n        }\r\n\r\n        //浏览器支持的起FRP这样的Observer统计性能\r\n        if ('PerformanceObserver' in W) {\r\n            initPerformanceObserver();\r\n        }\r\n        //初始化\r\n        if (typeof D.hidden !== 'undefined') {\r\n            //Opera 12.10和Firefox 18及更高版本支持\r\n            D.addEventListener(\r\n                'visibilitychange',\r\n                didVisibilityChange.bind(this, disconnectPerfObserversHidden)\r\n            );\r\n        }\r\n        //记录系统DNS请求+白屏时间等\r\n        logData('navigationTiming', getNavigationTiming());\r\n        //记录用户的网速 H5+多普勒测速\r\n        logData('networkInformation', getNetworkInformation());\r\n        //管理离线缓存数据\r\n        if (WN && WN.storage && typeof WN.storage.estimate === 'function') {\r\n            WN.storage.estimate().then(reportStorageEstimate);\r\n        }\r\n    }\r\n}","import { W, WP } from '../data/constants';\r\n/**\r\n * 如果浏览器支持Navigation Timing API，则为True\r\n * 用户计时API和PerformanceObserver接口\r\n * 在Safari中，用户计时API（performance.mark（））不可用\r\n * 因此，DevTools时间线不会用标记进行注释。\r\n * 开发者：developer.mozilla.org/en-US/docs/Web/API/Performance/mark\r\n *         developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\r\n *         developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\r\n */\r\nexport const isPerformanceSupported = (): boolean => {\r\n    return WP && !!WP.getEntriesByType && !!WP.now && !!WP.mark;\r\n};","import { WP } from '../data/constants';\r\nimport { isPerformanceSupported } from '../helpers/isSupported';\r\nimport { IYidengNavigationTiming } from '../typings/types';\r\n/**\r\n * Navigation Timing API provides performance metrics for HTML documents.\r\n * Navigation Timing API为HTML文档提供了性能指标。\r\n * w3c.github.io/navigation-timing/\r\n * developers.google.com/web/fundamentals/performance/navigation-and-resource-timing\r\n */\r\n\r\nexport const getNavigationTiming = (): IYidengNavigationTiming => {\r\n    if (!isPerformanceSupported()) {\r\n        return {};\r\n    }\r\n    // There is an open issue to type correctly getEntriesByType\r\n    // github.com/microsoft/TypeScript/issues/33866\r\n    // 这里直接的物理赋值performance.timing 已被弃用\r\n    const n = WP.getEntriesByType('navigation')[0] as any;\r\n    // In Safari version 11.2 Navigation Timing isn't supported yet\r\n    if (!n) {\r\n        return {};\r\n    }\r\n    const responseStart = n.responseStart;\r\n    const responseEnd = n.responseEnd;\r\n    //我们缓存navigation time以备将来使用\r\n    return {\r\n        // fetchStart marks when the browser starts to fetch a resource\r\n        // 浏览器开始获取资源时的fetchStart标记\r\n        // responseEnd is when the last byte of the response arrives\r\n        // responseEnd是响应的最后一个字节到达的时间\r\n        fetchTime: responseEnd - n.fetchStart,\r\n        // Service worker time plus response time\r\n        // Service worker时间加上响应时间\r\n        workerTime: n.workerStart > 0 ? responseEnd - n.workerStart : 0,\r\n        // Request plus response time (network only)\r\n        // 请求加上响应时间（仅限网络）\r\n        totalTime: responseEnd - n.requestStart,\r\n        // Response time only (download)\r\n        // 仅响应时间（下载）\r\n        downloadTime: responseEnd - responseStart,\r\n        // Time to First Byte (TTFB)\r\n        // 到第一个字节的时间（TTFB）\r\n        timeToFirstByte: responseStart - n.requestStart,\r\n        // HTTP header size\r\n        // HTTP头大小\r\n        headerSize: n.transferSize - n.encodedBodySize || 0,\r\n        //DNS解析时间\r\n        dnsLookupTime: n.domainLookupEnd - n.domainLookupStart,\r\n        //TCP建立时间\r\n        tcpTime: n.connectEnd - n.connectStart || 0,\r\n        // 白屏时间\r\n        whiteTime: n.responseStart - n.navigationStart || 0,\r\n        //dom渲染完成时间\r\n        domTime: n.domContentLoadedEventEnd - n.navigationStart || 0,\r\n        //页面onload时间\r\n        loadTime: n.loadEventEnd - n.navigationStart || 0,\r\n        //页面解析dom耗时\r\n        parseDomTime: n.domComplete - n.domInteractive || 0,\r\n    };\r\n};","import { W, WP } from '../data/constants';\r\n/**\r\n * True if the browser supports the Navigation Timing API,\r\n * User Timing API and the PerformanceObserver Interface.\r\n * In Safari, the User Timing API (performance.mark()) is not available,\r\n * so the DevTools timeline will not be annotated with marks.\r\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\r\n * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\r\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\r\n * \r\n * getEntriesByType  可以通过在显式时间点进行性能标记或度量（例如，通过调用mark（）方法）来创建列表的成员（条目）。\r\n * PerformanceObserver() 构造函数使用给定的观察者 callback 生成一个新的 PerformanceObserver 对象.当通过 observe() 方法注册的 条目类型 的 性能条目事件 被记录下来时,调用该观察者回调\r\n */\r\nexport const isPerformanceSupported = (): boolean => {\r\n    return WP && !!WP.getEntriesByType && !!WP.now && !!WP.mark;\r\n};"],"names":["AskPriority","W","window","C","console","D","document","WN","navigator","WP","performance","getDM","deviceMemory","getHC","hardwareConcurrency","ReportData","options","logUrl","Error","this","sendToAnalytics","level","body","url","logurl","URGENT","fetch","headers","module","config","toString","method","keepalive","xhr","XMLHttpRequest","setRequestHeader","send","onload","e","IDLE","sendBeacon","img","Image","src","reportData","isResourceTiming","isElementTiming","maxTime","isRrweb","rrwebUrl","permaceUrl","analyticsTracker","ErrorTrace","errordefo","eventsMatrix","globalError","onerror","eventOrMessage","scriptURL","lineno","colno","error","errorInfo","JSON","stringify","events","len","_this","length","concat","recordPage","networkError","addEventListener","target","log","promiseError","preventDefault","reason","iframeError","frames","i","consoleReflect","record","emit","event","isCheckout","push","checkoutEveryNth","packFn","pack","run","et","sd","getIsLowEndDevice","getIsLowEndExperience","visibility","isHidden","didVisibilityChange","cb","hidden","roundByTwo","num","parseFloat","toFixed","convertToKB","bytes","Math","pow","fcpScore","lcpScore","fidcore","clsScore","tbtScore","webVitalsScore","fp","fcp","lcp","lcpFinal","fid","fidVitals","cls","clsFinal","tbt","tbt5S","tbt10S","tbtFinal","getVitalsScore","measureName","value","reportPerf","data","customProperties","indexOf","metricName","eventProperties","navigatorInformation","serviceWorkerStatus","serviceWorker","controller","isLowEndDevice","isLowEndExperience","vitalsScore","requestIdleCallback","timeout","logData","metric","Object","keys","forEach","key","logMetric","duration","duration2Decimal","rt","beacon","css","other","script","total","xmlhttprequest","initLayoutShift","performanceEntries","lastEntry","pop","hadRecentInput","perfObservers","po","eventType","perfObserver","PerformanceObserver","entryList","getEntries","observe","type","buffered","warn","poDisconnect","observer","disconnect","initFirstInputDelay","processingStart","startTime","performanceEntry","takeRecords","setTimeout","initTotalBlockingTime","entry","name","blockingTime","initFirstPaint","initLargestContentfulPaint","renderTime","loadTime","initElementTiming","identifier","initResourceTiming","decodedBodySize","initiatorType","bodySize","disconnectPerfObserversHidden","reportStorageEstimate","storageInfo","estimateUsageDetails","usageDetails","quota","usage","caches","indexedDB","serviceWorkerRegistrations","v","insReportData","resourceTiming","elementTiming","maxMeasureTime","captureError","getEntriesByType","now","mark","random","bind","n","responseStart","responseEnd","fetchTime","fetchStart","workerTime","workerStart","totalTime","requestStart","downloadTime","timeToFirstByte","headerSize","transferSize","encodedBodySize","dnsLookupTime","domainLookupEnd","domainLookupStart","tcpTime","connectEnd","connectStart","whiteTime","navigationStart","domTime","domContentLoadedEventEnd","loadEventEnd","parseDomTime","domComplete","domInteractive","getNavigationTiming","dataConnection","connection","effectiveType","saveData","downlink","rtt","getNetworkInformation","storage","estimate","then"],"mappings":"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"}